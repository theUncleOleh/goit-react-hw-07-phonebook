{"version":3,"file":"static/js/471.8f164781.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/PageHeading/PageHeading.module.css?b132","components/PageHeading/PageHeading.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","contacts-api/contacts-api.jsx","redux/contacts/itemsOperations.js","redux/contacts/items-selectors.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/PhoneBookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"PageHeading_title__1wPIF\"};","import s from './PageHeading.module.css';\nexport default function PageHeading({ text }) {\n  return <h1 className={s.title}>{text}</h1>;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ContactList_title__gpugJ\",\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"button\":\"ContactList_button__7kL4l\"};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://629207f4cd0c91932b6c3fec.mockapi.io';\n\nexport async function axiosFetchContacts() {\n  const { data } = await axios.get(`/contacts`);\n  return data;\n}\n\n// export async function axiosAddContacts(contact) {\n//   const { data } = await axios.post('/contacts', contact);\n//   return data;\n// }\n","// import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport * as ContactsActions from './items-actions';\nimport * as ContactsAPI from '../../contacts-api/contacts-api';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(ContactsActions.fetchContactsRequest());\n  try {\n    const contacts = await ContactsAPI.axiosFetchContacts();\n    dispatch(ContactsActions.fetchContactsSuccess(contacts));\n  } catch (error) {\n    dispatch(ContactsActions.fetchContactsError(error));\n  }\n};\n\nexport const addContacts = (name, phone) => dispatch => {\n  dispatch(ContactsActions.addContactsRequest());\n  const contact = { name, phone };\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(ContactsActions.addContactsSuccess(data)))\n    .catch(error => dispatch(ContactsActions.addContactsError(error)));\n};\n\n// export const fetchContacts = createAsyncThunk(\n//   'items/fetchAllContacts',\n//   async () => {\n//     const contacts = await ContactsAPI.axiosFetchContacts();\n//     return contacts;\n//   }\n// );\n","// export const getContactsSelector = state => state.contacts.items;\nexport const getFilterSelector = state => state.contacts.filter;\nexport const getContactsSelector = state => state.contacts.items;\nconsole.log(getContactsSelector);\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"button\":\"Form_button__8NOIT\"};","import React, { useState } from 'react';\nimport s from './Form.module.css';\n\nexport default function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label htmlFor=\"\" className={s.label}>\n        Name\n        <input\n          autoComplete=\"off\"\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label htmlFor=\"\" className={s.label}>\n        Number\n        <input\n          autoComplete=\"off\"\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n// class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//     id: '',\n//   };\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n//     this.props.onSubmit(this.state);\n//     console.log(this.state);\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label htmlFor=\"\" className={s.label}>\n//           Name\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </label>\n\n//         <label htmlFor=\"\" className={s.label}>\n//           Number\n//           <input\n//             className={s.input}\n//             onSubmit={this.handleSubmit}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\"};","import React from 'react';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filter } from '../../redux/contacts/items-actions';\nimport { getFilterSelector } from '../../redux/contacts/items-selectors';\n\nexport default function Filter() {\n  const value = useSelector(getFilterSelector);\n  console.log(value);\n  const dispatch = useDispatch();\n  const handleChange = e => {\n    dispatch(filter(e.target.value));\n    console.log(e.currentTarget.value);\n  };\n  return (\n    <label className={s.label}>\n      Filter\n      <input\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        className={s.input}\n      />\n    </label>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Fragment, useEffect } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport s from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { itemsSelectors } from 'redux/contacts';\nimport { itemsOperations } from 'redux/contacts';\n// import { add, remove } from '../../redux/contacts/items-actions';\n\nimport { toast } from 'react-toastify';\nimport Form from 'components/Form';\nimport Filter from 'components/Filter';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(itemsSelectors.getContactsSelector);\n  const value = useSelector(itemsSelectors.getFilterSelector);\n  console.log(contacts);\n  console.log(value);\n\n  const addContacts = contact => {\n    // dispatch(itemsOperations.addContacts(contact));\n\n    const toNormalizeName = contact.name.toLocaleLowerCase();\n    const name = contacts.find(\n      ({ name }) => name.toLocaleLowerCase() === toNormalizeName\n    );\n\n    if (name) {\n      return toast.error(`${contact.name} is already in contacts`);\n    }\n    dispatch(itemsOperations.addContacts(contact));\n    toast.success(`${contact.name} was added to contacts!`);\n  };\n  // const checkName = ({ name }) => {\n  //   const toNormalizeName = name.toLocaleLowerCase();\n  //   return contacts.find(\n  //     ({ name }) => name.toLocaleLowerCase() === toNormalizeName\n  //   );\n  // };\n\n  // const getVisibleContacts = () => {\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(value.toLocaleLowerCase())\n  //   );\n  // };\n\n  // const visibleContacts = getVisibleContacts();\n\n  const deleteContact = id => {\n    // dispatch(remove(id));\n  };\n  // const numberFormatting = number => {\n  //   const array = [...number];\n  //   for (let i = 3; i < array.length - 1; i += 3) {\n  //     array.splice(i, 0, '-');\n  //   }\n  //   return array.join('');\n  // };\n  useEffect(() => {\n    dispatch(itemsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      <Form onSubmit={addContacts} />\n      <Filter />\n      <h2 className={s.title}>Contacts</h2>\n      {contacts.length > 0 && (\n        <ul className={s.list}>\n          {contacts.map(contact => (\n            <li key={contact.id} className={s.item}>\n              <p className={s.graf}>\n                {contact.name}: {contact.phone}\n              </p>\n              <button\n                type=\"button\"\n                className={s.button}\n                onClick={() => deleteContact(contact.id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      <ToastContainer />\n    </Fragment>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import PageHeading from 'components/PageHeading';\nimport ContactList from 'components/ContactList';\n\nexport default function PhoneBookPage() {\n  return (\n    <>\n      <PageHeading text=\"Phonebook\" />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["PageHeading","text","className","s","axiosFetchContacts","axios","data","getFilterSelector","state","contacts","filter","getContactsSelector","items","console","log","Form","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","reset","preventDefault","htmlFor","autoComplete","type","onChange","pattern","title","required","Filter","useSelector","dispatch","useDispatch","e","currentTarget","ContactList","itemsSelectors","useEffect","ContactsActions","ContactsAPI","Fragment","contact","toNormalizeName","toLocaleLowerCase","find","toast","phone","then","catch","error","itemsOperations","length","map","onClick","id","PhoneBookPage"],"sourceRoot":""}